#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define FSLASH  LS(N7)
#define PIPE    RA(NON_US_BACKSLASH)
#define BSLASH  RA(MINUS)

#define LESSTH  NON_US_BACKSLASH
#define LBRACK  RA(N8)
#define LBRACE  ASTERISK
#define LPAREN  CARET
#define AMPERS  RPAR
#define EQUALS  LPAR
#define RPAREN  RA(N0)
#define RBRACK  RA(N9)
#define RBRACE  LS(NON_US_BSLH)
#define GREATH  LS(N2)

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  Ã–  |     |
            // |  ESC |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  *  |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  :  |  -  |     |
            //                    | BKS | LWR | SPC |   | ENT | RSE  | DEL |

            bindings = <
&kp TAB         &kp Q           &kp W           &kp F           &kp P           &kp B       &kp J       &kp L           &kp U           &kp Y           &kp SEMI        &kp RBKT
&hml LGUI ESC   &hml LGUI A     &hml LALT R     &hml LSHIFT S   &hml LCTRL T    &kp G       &kp M       &hmr RCTRL N    &hmr RSHIFT E   &hmr RALT I     &hmr RGUI O     &kp NUHS
&kp LSHFT       &kp Z           &kp X           &kp C           &kp D           &kp V       &kp K       &kp H           &kp COMMA       &kp PERIOD      &kp FSLH        &kp RSHIFT
                                                &kp BACKSPACE   &mo 1           &kp SPACE   &kp RET     &mo 2           &kp DELETE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp N0  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp RA(RBKT)
&trans  &kp LESSTH  &kp LBRACK  &kp LBRACE  &kp LPAREN  &kp AMPERS  &kp EQUALS  &kp RPAREN  &kp RBRACK  &kp RBRACE  &kp GREATH  &trans
&trans  &kp FSLASH  &kp PIPE    &kp BSLASH  &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                                &trans      &trans      &trans      &trans      &trans      &trans
            >;
        };

        raise_layer {
            bindings = <
&kp F12  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
