#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define FSLASH  LS(N7)
#define RPIPE   RA(NON_US_BACKSLASH)
#define BSLASH  RA(MINUS)
#define LESSTH  NON_US_BACKSLASH
#define LBRACK  RA(N8)
#define LBRACE  RA(N7)
#define LPAREN  ASTERISK
#define AMPERS  CARET
#define EQUALS  RPAR
#define RPAREN  LPAR
#define RBRACK  RA(N0)
#define RBRACE  RA(N9)
#define GRTHAN  LS(NON_US_BSLH)
#define RTILDE  RA(RBKT)
#define AO      LEFT_BRACKET
#define AE      SQT
#define OE      SEMICOLON

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  +  |  Â¨   |
            // |  ESC |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  -  | SHFT |
            //                    | BKS | LWR | SPC |   | ENT | RSE  | DEL |

            bindings = <
&kp TAB        &kp Q        &kp W        &kp F          &kp P         &kp B        &kp J    &kp L         &kp U          &kp Y        &kp MINUS    &kp RBKT
&hml LGUI ESC  &hml LGUI A  &hml LALT R  &hml LSHIFT S  &hml LCTRL T  &kp G        &kp M    &hmr RCTRL N  &hmr RSHIFT E  &hmr RALT I  &hmr RGUI O  &kp NUHS
&kp LSHFT      &kp Z        &kp X        &kp C          &kp D         &kp V        &kp K    &kp H         &kp COMMA      &kp PERIOD   &kp FSLH     &kp RSHIFT
                                         &kp BACKSPACE  &mo 1         &kp SPACE    &kp RET  &mo 2         &kp DELETE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |   0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  ~  |
            // |      |  <  |  [  |  {  |  (  |  &  |   |  =  |  )  |  }  |  ]  |  >  |  "  |
            // | SHFT |  /  |  *  |  \  |     |     |   |     |     |     |     |     |     |
            //                    |     |     |     |   |     |     |     |

            bindings = <
&kp N0  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5        &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp RTILDE
&trans  &kp LESSTH  &kp LBRACK  &kp LBRACE  &kp LPAREN  &kp AMPERS    &kp EQUALS  &kp RPAREN  &kp RBRACK  &kp RBRACE  &kp GRTHAN  &kp LS(N2)
&trans  &kp FSLASH  &kp RPIPE   &kp BSLASH  &trans      &trans        &trans      &trans      &trans      &trans      &trans      &trans
                                &trans      &trans      &trans        &trans      &trans      &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp C_PREV    &kp C_PP    &kp C_NEXT    &kp PSCRN  &trans    &kp DOWN  &kp RIGHT  &kp AO  &kp AE  &kp OE  &trans
&trans  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &trans     &trans    &trans    &trans     &trans  &trans  &trans  &trans
&trans  &trans        &trans      &trans        &trans     &trans    &kp UP    &kp LEFT   &trans  &trans  &trans  &trans
                                  &trans        &trans     &trans    &trans    &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F12     &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &kp F11
&bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans          &trans          &trans          &trans          &trans          &trans  &trans  &trans  &trans  &trans   &trans
                                            &trans          &trans          &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
